------------------------------------------------------------
CHAPTER 1 - PIG
------------------------------------------------------------

- Pig Latin

    - Pig Latin is a parallel data flow language.  This means it allows users to describe how data from 
        one or more inputs should be read, processed, and then stored to one or more outputs in parallel.
        

    - These data flows can be simple linear flows, or complex workflows that include points where multiple
        inputs are joined and data is split into multiple streams to be processed by different operators.
        A Pig Latin script describes a DAG, where the edges are data flows and the nodes are operators
        that process the data.



- Query vs Data Flow Languages

    - SQL is a query language.  It lets users describe what question they want answered, but not how they
        want it answered.  In Pig Latin, the user describes exactly how to process the input data.


    - In SQL, when users want to do several data operations together, they must either write separate
        queries, use temporary tables, or use nested subqueries.  Pig is designed with a long series of
        data operations in mind.  


    - SQL was designed for a RDBMS.  Pig was designed for Hadoop.  In Hadoop, data may not be properly
        constrained and is rarely normalized.  Pig can operate on data directly in HDFS, it does not
        require data to be loaded into tables first.



- Pig on Hadoop

    - Pig can run on MapReduce, Tez, or Spark.

    - Tez is an alternative to MR for processing data on Hadoop.  It executes DAGs of tasks.  Tez is more
        general and flexible than MR.  It provides better performance and lower latency. 

      Tez is a low-level execution engine and is not meant to be used by end users directly.  It can be
        thought of as assembly language on Hadoop.  



- Pig vs MapReduce

    - MapReduce Hello World Example

        Input:
        Mary had a little lamb
        its fleece was white as snow
        and everywhere that Mary went
        the lamb was sure to go


        Mary had a         its fleece was       and everywhere       the lamb was
        little lamb        white as snow        that Mary went       sure to go
            |                    |                     |                   |
            v                    v                     v                   v
           map                  map                   map                 map
            |                    |                     |                   |
            v                    v                     v                   v
          Mary 1               its 1                  and 1              the 1
          had 1                fleece 1               everywhere 1       lamb 1
          a 1                  was 1                  that 1             was 1
          little 1             white 1                Mary 1             sure 1
          lamb 1               as 1                   went 1             to 1
                               snow 1                                    go 1

            / \                 / \                     / \               / \

                    reduce                         reduce
                       |                              |
                       v                              v
                    had 1                           Mary 2
                    a 1                             was 2
                    little 1                        white 1
                    lamb 2                          snow 1
                    ...                             ...


    - Pig Example

        -- Load input from the file named Mary, and call the single 
        -- field in the record 'line'.
        input = load 'mary' as (line);

        -- TOKENIZE splits the line into a field for each word.
        -- flatten will take the collection of records returned by
        -- TOKENIZE and produce a separate record for each one, calling the single
        -- field in the record word.
        words = foreach input generate flatten(TOKENIZE(line)) as word;

        -- Now group them together by each word.
        grpd  = group words by word;

        -- Count them.
        cntd  = foreach grpd generate group, COUNT(words);
        -- Print out the results.
        dump cntd;


    - Pig Latin provides operators that MR does not, especially 'join'.  


    - Pig ensures that data is evenly distributed to reducers.


    - Pig code takes much less time to write than equivalent MR code.



- Another Pig Example

    This example will find the 5 pages most visited by users between the ages of 18 and 25.

    Users = load 'users' as (name, age);
    Fltrd = filter Users by age >= 18 and age <= 25;
    Pages = load 'pages' as (user, url);
    Jnd   = join Fltrd by name, Pages by user;
    Grpd  = group Jnd by url;
    Smmd  = foreach Grpd generate group, COUNT(Jnd) as clicks;
    Srtd  = order Smmd by clicks desc;
    Top5  = limit Srtd 5;
    store Top5 into 'top5sites';



- Uses of Pig

    1. Data Pipelines

        [Example #1 - web company]
        A. Web server logs are loaded into HDFS
        B. Pig is used to clean out records with corrupt data
        C. Pig is used to join web event data against user databases to connect cookies to users

        [Example #2 - behavior prediction]
        A. Pig is used to scan through user interactions with a website and split users into segments
        B. For each segment, a math model is produced to predict how members of segment will respond to ads

    2. Research on Raw Data

    3. Iterative Processing

        [Example #3 - news website]
        A. News website keeps a graph of all the news stories on the web it is tracking
        B. Every 5 minutes, a new set of stories comes in, and engine must integrate them into the graph
        C. Pig iteratively joins the new stories to the behavior targeting model of graph



- Pig is for Batch Processing

    One point is that Pig (like MR) is oriented around the batch processing of data.  If you need to 
    process GBs or TBs of data, Pig is a good choice.  It expects to read all the records of a file and
      write all of its output sequentially.  

    For workloads that require writing single or small groups of records, or looking up many different
      records in random order, Pig (like MR) is not a good choice.



- The Pig Philosophy

    1. Pigs eat anything

        - Pig can operate on data whether it has metadata or not
        - Pig can operate on data that is relational, nested, or unstructured
        - Pig can easily be extended to operate on key/value store, databases, etc...


    2. Pigs live anywhere

        - Pig is a language for parallel data processing anywhere
        - Pig was implemented first on Hadoop, but is not intended to be only on Hadoop


    3. Pigs are domestic animals

        - Pig is easily controlled and modified by its users
        - Pig allows integration of user code whenever possible, so it supports UDFs
        - Pig supports external executables and MapReduce JARs
        - Pig's optimizer can be configured based on user needs


    4. Pigs fly

        - Pig processes data quickly
        - Performance is constantly improving



- History of Pig

    - Started as a research project at Yahoo in 2007
    - Became official Hadoop subproject in 2008
    - Added to Amazon EMR in 2009
    - Became top-level Apache project in 2010